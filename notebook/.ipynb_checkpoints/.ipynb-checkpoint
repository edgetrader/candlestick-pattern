{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Candlestick Pattern Detection\n",
    "by Chee-Foong \n",
    "\n",
    "\n",
    "## Summary \n",
    "This analysis follows the steps found in the article \"[Recognizing over 50 Candlestick Patterns with Python](https://medium.com/analytics-vidhya/recognizing-over-50-candlestick-patterns-with-python-4f02a1822cb5)\" by **Caner Irfanoglu**.  I thank him for making his work public.\n",
    "\n",
    "Candlestick patterns is one of many features for machine learning modeling work to predict time-series returns of investible assets like shares, currency, cryptos, etc.\n",
    "\n",
    "\n",
    "## Reference\n",
    "1. https://medium.com/analytics-vidhya/recognizing-over-50-candlestick-patterns-with-python-4f02a1822cb5\n",
    "2. https://github.com/mrjbq7/ta-lib\n",
    "3. https://en.wikipedia.org/wiki/Candlestick_pattern\n",
    "4. https://www.youtube.com/watch?v=sJCgnSOcTPE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip3 install TA-Lib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "warnings.filterwarnings(\"ignore\", category=Warning)\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "\n",
    "# IMPORTS\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import time\n",
    "import math\n",
    "import os.path\n",
    "\n",
    "# from tqdm import tnrange, notebook\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "from datetime import timedelta, datetime\n",
    "from dateutil import parser\n",
    "\n",
    "# Import the plotting library\n",
    "import matplotlib.pyplot as plt\n",
    "# %matplotlib inline\n",
    "\n",
    "import matplotlib.dates as mdates\n",
    "from matplotlib.dates import DateFormatter\n",
    "from matplotlib.dates import MonthLocator\n",
    "\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "\n",
    "plt.rcParams.update({'figure.figsize':(15,7), 'figure.dpi':120})\n",
    "# plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-03-06 08:00:00+08:00</th>\n",
       "      <td>1579.01</td>\n",
       "      <td>1671.58</td>\n",
       "      <td>1513.03</td>\n",
       "      <td>1650.35</td>\n",
       "      <td>7.700625e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-07 08:00:00+08:00</th>\n",
       "      <td>1650.68</td>\n",
       "      <td>1734.16</td>\n",
       "      <td>1630.35</td>\n",
       "      <td>1726.16</td>\n",
       "      <td>8.484708e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-08 08:00:00+08:00</th>\n",
       "      <td>1726.46</td>\n",
       "      <td>1843.59</td>\n",
       "      <td>1664.96</td>\n",
       "      <td>1833.18</td>\n",
       "      <td>1.149711e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-09 08:00:00+08:00</th>\n",
       "      <td>1833.22</td>\n",
       "      <td>1870.77</td>\n",
       "      <td>1798.20</td>\n",
       "      <td>1870.51</td>\n",
       "      <td>8.572295e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-10 08:00:00+08:00</th>\n",
       "      <td>1870.50</td>\n",
       "      <td>1877.69</td>\n",
       "      <td>1757.00</td>\n",
       "      <td>1795.12</td>\n",
       "      <td>9.372306e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-11 08:00:00+08:00</th>\n",
       "      <td>1795.28</td>\n",
       "      <td>1846.70</td>\n",
       "      <td>1725.00</td>\n",
       "      <td>1825.78</td>\n",
       "      <td>9.090115e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-12 08:00:00+08:00</th>\n",
       "      <td>1825.78</td>\n",
       "      <td>1841.88</td>\n",
       "      <td>1719.72</td>\n",
       "      <td>1766.10</td>\n",
       "      <td>8.695646e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-13 08:00:00+08:00</th>\n",
       "      <td>1766.13</td>\n",
       "      <td>1944.30</td>\n",
       "      <td>1727.75</td>\n",
       "      <td>1922.35</td>\n",
       "      <td>9.262832e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-14 08:00:00+08:00</th>\n",
       "      <td>1922.35</td>\n",
       "      <td>1933.10</td>\n",
       "      <td>1836.00</td>\n",
       "      <td>1848.10</td>\n",
       "      <td>6.379636e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-15 08:00:00+08:00</th>\n",
       "      <td>1848.10</td>\n",
       "      <td>1891.76</td>\n",
       "      <td>1730.00</td>\n",
       "      <td>1793.48</td>\n",
       "      <td>1.025327e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-16 08:00:00+08:00</th>\n",
       "      <td>1793.99</td>\n",
       "      <td>1819.50</td>\n",
       "      <td>1711.68</td>\n",
       "      <td>1805.12</td>\n",
       "      <td>7.649934e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-17 08:00:00+08:00</th>\n",
       "      <td>1805.01</td>\n",
       "      <td>1838.88</td>\n",
       "      <td>1741.18</td>\n",
       "      <td>1823.58</td>\n",
       "      <td>6.583494e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-18 08:00:00+08:00</th>\n",
       "      <td>1823.58</td>\n",
       "      <td>1850.00</td>\n",
       "      <td>1759.04</td>\n",
       "      <td>1776.08</td>\n",
       "      <td>6.037216e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-19 08:00:00+08:00</th>\n",
       "      <td>1775.92</td>\n",
       "      <td>1840.61</td>\n",
       "      <td>1733.47</td>\n",
       "      <td>1809.10</td>\n",
       "      <td>5.002584e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-20 08:00:00+08:00</th>\n",
       "      <td>1809.01</td>\n",
       "      <td>1868.83</td>\n",
       "      <td>1800.86</td>\n",
       "      <td>1806.10</td>\n",
       "      <td>4.515561e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-21 08:00:00+08:00</th>\n",
       "      <td>1806.57</td>\n",
       "      <td>1817.16</td>\n",
       "      <td>1747.00</td>\n",
       "      <td>1782.98</td>\n",
       "      <td>4.659540e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-22 08:00:00+08:00</th>\n",
       "      <td>1783.23</td>\n",
       "      <td>1807.51</td>\n",
       "      <td>1655.15</td>\n",
       "      <td>1680.97</td>\n",
       "      <td>5.827275e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-23 08:00:00+08:00</th>\n",
       "      <td>1681.17</td>\n",
       "      <td>1721.17</td>\n",
       "      <td>1650.00</td>\n",
       "      <td>1668.08</td>\n",
       "      <td>5.772140e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-24 08:00:00+08:00</th>\n",
       "      <td>1668.20</td>\n",
       "      <td>1740.86</td>\n",
       "      <td>1536.92</td>\n",
       "      <td>1581.84</td>\n",
       "      <td>7.538345e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-25 08:00:00+08:00</th>\n",
       "      <td>1581.88</td>\n",
       "      <td>1622.00</td>\n",
       "      <td>1549.40</td>\n",
       "      <td>1585.74</td>\n",
       "      <td>7.016970e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-26 08:00:00+08:00</th>\n",
       "      <td>1585.83</td>\n",
       "      <td>1699.93</td>\n",
       "      <td>1585.79</td>\n",
       "      <td>1698.84</td>\n",
       "      <td>5.154709e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-27 08:00:00+08:00</th>\n",
       "      <td>1698.84</td>\n",
       "      <td>1732.67</td>\n",
       "      <td>1666.41</td>\n",
       "      <td>1712.63</td>\n",
       "      <td>4.438455e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-28 08:00:00+08:00</th>\n",
       "      <td>1712.52</td>\n",
       "      <td>1725.66</td>\n",
       "      <td>1661.40</td>\n",
       "      <td>1687.01</td>\n",
       "      <td>3.488955e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-29 08:00:00+08:00</th>\n",
       "      <td>1687.16</td>\n",
       "      <td>1841.00</td>\n",
       "      <td>1677.85</td>\n",
       "      <td>1816.74</td>\n",
       "      <td>6.477245e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-30 08:00:00+08:00</th>\n",
       "      <td>1816.76</td>\n",
       "      <td>1859.13</td>\n",
       "      <td>1786.30</td>\n",
       "      <td>1840.46</td>\n",
       "      <td>5.688420e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-31 08:00:00+08:00</th>\n",
       "      <td>1840.41</td>\n",
       "      <td>1862.55</td>\n",
       "      <td>1768.15</td>\n",
       "      <td>1808.69</td>\n",
       "      <td>2.420725e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Open     High      Low    Close        Volume\n",
       "Date                                                                       \n",
       "2021-03-06 08:00:00+08:00  1579.01  1671.58  1513.03  1650.35  7.700625e+05\n",
       "2021-03-07 08:00:00+08:00  1650.68  1734.16  1630.35  1726.16  8.484708e+05\n",
       "2021-03-08 08:00:00+08:00  1726.46  1843.59  1664.96  1833.18  1.149711e+06\n",
       "2021-03-09 08:00:00+08:00  1833.22  1870.77  1798.20  1870.51  8.572295e+05\n",
       "2021-03-10 08:00:00+08:00  1870.50  1877.69  1757.00  1795.12  9.372306e+05\n",
       "2021-03-11 08:00:00+08:00  1795.28  1846.70  1725.00  1825.78  9.090115e+05\n",
       "2021-03-12 08:00:00+08:00  1825.78  1841.88  1719.72  1766.10  8.695646e+05\n",
       "2021-03-13 08:00:00+08:00  1766.13  1944.30  1727.75  1922.35  9.262832e+05\n",
       "2021-03-14 08:00:00+08:00  1922.35  1933.10  1836.00  1848.10  6.379636e+05\n",
       "2021-03-15 08:00:00+08:00  1848.10  1891.76  1730.00  1793.48  1.025327e+06\n",
       "2021-03-16 08:00:00+08:00  1793.99  1819.50  1711.68  1805.12  7.649934e+05\n",
       "2021-03-17 08:00:00+08:00  1805.01  1838.88  1741.18  1823.58  6.583494e+05\n",
       "2021-03-18 08:00:00+08:00  1823.58  1850.00  1759.04  1776.08  6.037216e+05\n",
       "2021-03-19 08:00:00+08:00  1775.92  1840.61  1733.47  1809.10  5.002584e+05\n",
       "2021-03-20 08:00:00+08:00  1809.01  1868.83  1800.86  1806.10  4.515561e+05\n",
       "2021-03-21 08:00:00+08:00  1806.57  1817.16  1747.00  1782.98  4.659540e+05\n",
       "2021-03-22 08:00:00+08:00  1783.23  1807.51  1655.15  1680.97  5.827275e+05\n",
       "2021-03-23 08:00:00+08:00  1681.17  1721.17  1650.00  1668.08  5.772140e+05\n",
       "2021-03-24 08:00:00+08:00  1668.20  1740.86  1536.92  1581.84  7.538345e+05\n",
       "2021-03-25 08:00:00+08:00  1581.88  1622.00  1549.40  1585.74  7.016970e+05\n",
       "2021-03-26 08:00:00+08:00  1585.83  1699.93  1585.79  1698.84  5.154709e+05\n",
       "2021-03-27 08:00:00+08:00  1698.84  1732.67  1666.41  1712.63  4.438455e+05\n",
       "2021-03-28 08:00:00+08:00  1712.52  1725.66  1661.40  1687.01  3.488955e+05\n",
       "2021-03-29 08:00:00+08:00  1687.16  1841.00  1677.85  1816.74  6.477245e+05\n",
       "2021-03-30 08:00:00+08:00  1816.76  1859.13  1786.30  1840.46  5.688420e+05\n",
       "2021-03-31 08:00:00+08:00  1840.41  1862.55  1768.15  1808.69  2.420725e+05"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crypto = pd.read_csv('../data/ETHUSDT-1m-data.csv', parse_dates=True)\n",
    "\n",
    "def cleanPx(prices, freq='1H'):\n",
    "    prices = prices.iloc[prices.timestamp.drop_duplicates(keep='last').index]\n",
    "    prices.timestamp = pd.to_datetime(prices.timestamp)\n",
    "    prices.set_index('timestamp', inplace=True)\n",
    "\n",
    "    prices_ohlc = prices[['open','high','low','close']]\n",
    "    prices_vol = prices[['volume']]\n",
    "\n",
    "    prices_ohlc = prices_ohlc.resample(freq).agg({'open': 'first', \n",
    "                                 'high': 'max', \n",
    "                                 'low': 'min', \n",
    "                                 'close': 'last'})\n",
    "    prices_vol = prices_vol.resample(freq).sum()\n",
    "\n",
    "    prices = pd.concat([prices_ohlc, prices_vol], axis=1)\n",
    "    prices.index = prices.index.tz_localize('UTC').tz_convert('Asia/Singapore')\n",
    "\n",
    "    return prices.dropna()\n",
    "\n",
    "crypto = cleanPx(crypto, '1D')\n",
    "crypto.reset_index(inplace=True)\n",
    "crypto.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']\n",
    "crypto.set_index('Date', inplace=True)\n",
    "\n",
    "crypto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Patterns for Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import talib\n",
    "candle_names = talib.get_function_groups()['Pattern Recognition']\n",
    "removed = ['CDLCOUNTERATTACK', 'CDLLONGLINE', 'CDLSHORTLINE', \n",
    "           'CDLSTALLEDPATTERN', 'CDLKICKINGBYLENGTH']\n",
    "candle_names = [name for name in candle_names if name not in removed]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# interested = ['CDLDOJI', 'CDLDOJISTAR','CDLENGULFING']\n",
    "# candle_names = [name for name in candle_names if name in interested]\n",
    "\n",
    "# len(candle_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'CDL2CROWS, CDL3BLACKCROWS, CDL3INSIDE, CDL3LINESTRIKE, CDL3OUTSIDE, CDL3STARSINSOUTH, CDL3WHITESOLDIERS, CDLABANDONEDBABY, CDLADVANCEBLOCK, CDLBELTHOLD, CDLBREAKAWAY, CDLCLOSINGMARUBOZU, CDLCONCEALBABYSWALL, CDLDARKCLOUDCOVER, CDLDOJI, CDLDOJISTAR, CDLDRAGONFLYDOJI, CDLENGULFING, CDLEVENINGDOJISTAR, CDLEVENINGSTAR, CDLGAPSIDESIDEWHITE, CDLGRAVESTONEDOJI, CDLHAMMER, CDLHANGINGMAN, CDLHARAMI, CDLHARAMICROSS, CDLHIGHWAVE, CDLHIKKAKE, CDLHIKKAKEMOD, CDLHOMINGPIGEON, CDLIDENTICAL3CROWS, CDLINNECK, CDLINVERTEDHAMMER, CDLKICKING, CDLLADDERBOTTOM, CDLLONGLEGGEDDOJI, CDLMARUBOZU, CDLMATCHINGLOW, CDLMATHOLD, CDLMORNINGDOJISTAR, CDLMORNINGSTAR, CDLONNECK, CDLPIERCING, CDLRICKSHAWMAN, CDLRISEFALL3METHODS, CDLSEPARATINGLINES, CDLSHOOTINGSTAR, CDLSPINNINGTOP, CDLSTICKSANDWICH, CDLTAKURI, CDLTASUKIGAP, CDLTHRUSTING, CDLTRISTAR, CDLUNIQUE3RIVER, CDLUPSIDEGAP2CROWS, CDLXSIDEGAP3METHODS'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "', '.join(candle_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "crypto.reset_index(inplace=True)\n",
    "crypto = crypto[['Date', 'Open', 'High', 'Low', 'Close']]\n",
    "crypto.columns = ['time', 'open', 'high', 'low', 'close']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ranking of Patterns\n",
    "Candlestick pattern ranking so that the most important candlestick pattern is selected for the candle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "candle_rankings = {\n",
    "        \"CDL3LINESTRIKE_Bull\": 1,\n",
    "        \"CDL3LINESTRIKE_Bear\": 2,\n",
    "        \"CDL3BLACKCROWS_Bull\": 3,\n",
    "        \"CDL3BLACKCROWS_Bear\": 3,\n",
    "        \"CDLEVENINGSTAR_Bull\": 4,\n",
    "        \"CDLEVENINGSTAR_Bear\": 4,\n",
    "        \"CDLTASUKIGAP_Bull\": 5,\n",
    "        \"CDLTASUKIGAP_Bear\": 5,\n",
    "        \"CDLINVERTEDHAMMER_Bull\": 6,\n",
    "        \"CDLINVERTEDHAMMER_Bear\": 6,\n",
    "        \"CDLMATCHINGLOW_Bull\": 7,\n",
    "        \"CDLMATCHINGLOW_Bear\": 7,\n",
    "        \"CDLABANDONEDBABY_Bull\": 8,\n",
    "        \"CDLABANDONEDBABY_Bear\": 8,\n",
    "        \"CDLBREAKAWAY_Bull\": 10,\n",
    "        \"CDLBREAKAWAY_Bear\": 10,\n",
    "        \"CDLMORNINGSTAR_Bull\": 12,\n",
    "        \"CDLMORNINGSTAR_Bear\": 12,\n",
    "        \"CDLPIERCING_Bull\": 13,\n",
    "        \"CDLPIERCING_Bear\": 13,\n",
    "        \"CDLSTICKSANDWICH_Bull\": 14,\n",
    "        \"CDLSTICKSANDWICH_Bear\": 14,\n",
    "        \"CDLTHRUSTING_Bull\": 15,\n",
    "        \"CDLTHRUSTING_Bear\": 15,\n",
    "        \"CDLINNECK_Bull\": 17,\n",
    "        \"CDLINNECK_Bear\": 17,\n",
    "        \"CDL3INSIDE_Bull\": 20,\n",
    "        \"CDL3INSIDE_Bear\": 56,\n",
    "        \"CDLHOMINGPIGEON_Bull\": 21,\n",
    "        \"CDLHOMINGPIGEON_Bear\": 21,\n",
    "        \"CDLDARKCLOUDCOVER_Bull\": 22,\n",
    "        \"CDLDARKCLOUDCOVER_Bear\": 22,\n",
    "        \"CDLIDENTICAL3CROWS_Bull\": 24,\n",
    "        \"CDLIDENTICAL3CROWS_Bear\": 24,\n",
    "        \"CDLMORNINGDOJISTAR_Bull\": 25,\n",
    "        \"CDLMORNINGDOJISTAR_Bear\": 25,\n",
    "        \"CDLXSIDEGAP3METHODS_Bull\": 27,\n",
    "        \"CDLXSIDEGAP3METHODS_Bear\": 26,\n",
    "        \"CDLTRISTAR_Bull\": 28,\n",
    "        \"CDLTRISTAR_Bear\": 76,\n",
    "        \"CDLGAPSIDESIDEWHITE_Bull\": 46,\n",
    "        \"CDLGAPSIDESIDEWHITE_Bear\": 29,\n",
    "        \"CDLEVENINGDOJISTAR_Bull\": 30,\n",
    "        \"CDLEVENINGDOJISTAR_Bear\": 30,\n",
    "        \"CDL3WHITESOLDIERS_Bull\": 32,\n",
    "        \"CDL3WHITESOLDIERS_Bear\": 32,\n",
    "        \"CDLONNECK_Bull\": 33,\n",
    "        \"CDLONNECK_Bear\": 33,\n",
    "        \"CDL3OUTSIDE_Bull\": 34,\n",
    "        \"CDL3OUTSIDE_Bear\": 39,\n",
    "        \"CDLRICKSHAWMAN_Bull\": 35,\n",
    "        \"CDLRICKSHAWMAN_Bear\": 35,\n",
    "        \"CDLSEPARATINGLINES_Bull\": 36,\n",
    "        \"CDLSEPARATINGLINES_Bear\": 40,\n",
    "        \"CDLLONGLEGGEDDOJI_Bull\": 37,\n",
    "        \"CDLLONGLEGGEDDOJI_Bear\": 37,\n",
    "        \"CDLHARAMI_Bull\": 38,\n",
    "        \"CDLHARAMI_Bear\": 72,\n",
    "        \"CDLLADDERBOTTOM_Bull\": 41,\n",
    "        \"CDLLADDERBOTTOM_Bear\": 41,\n",
    "        \"CDLCLOSINGMARUBOZU_Bull\": 70,\n",
    "        \"CDLCLOSINGMARUBOZU_Bear\": 43,\n",
    "        \"CDLTAKURI_Bull\": 47,\n",
    "        \"CDLTAKURI_Bear\": 47,\n",
    "        \"CDLDOJISTAR_Bull\": 49,\n",
    "        \"CDLDOJISTAR_Bear\": 51,\n",
    "        \"CDLHARAMICROSS_Bull\": 50,\n",
    "        \"CDLHARAMICROSS_Bear\": 80,\n",
    "        \"CDLADVANCEBLOCK_Bull\": 54,\n",
    "        \"CDLADVANCEBLOCK_Bear\": 54,\n",
    "        \"CDLSHOOTINGSTAR_Bull\": 55,\n",
    "        \"CDLSHOOTINGSTAR_Bear\": 55,\n",
    "        \"CDLMARUBOZU_Bull\": 71,\n",
    "        \"CDLMARUBOZU_Bear\": 57,\n",
    "        \"CDLUNIQUE3RIVER_Bull\": 60,\n",
    "        \"CDLUNIQUE3RIVER_Bear\": 60,\n",
    "        \"CDL2CROWS_Bull\": 61,\n",
    "        \"CDL2CROWS_Bear\": 61,\n",
    "        \"CDLBELTHOLD_Bull\": 62,\n",
    "        \"CDLBELTHOLD_Bear\": 63,\n",
    "        \"CDLHAMMER_Bull\": 65,\n",
    "        \"CDLHAMMER_Bear\": 65,\n",
    "        \"CDLHIGHWAVE_Bull\": 67,\n",
    "        \"CDLHIGHWAVE_Bear\": 67,\n",
    "        \"CDLSPINNINGTOP_Bull\": 69,\n",
    "        \"CDLSPINNINGTOP_Bear\": 73,\n",
    "        \"CDLUPSIDEGAP2CROWS_Bull\": 74,\n",
    "        \"CDLUPSIDEGAP2CROWS_Bear\": 74,\n",
    "        \"CDLGRAVESTONEDOJI_Bull\": 77,\n",
    "        \"CDLGRAVESTONEDOJI_Bear\": 77,\n",
    "        \"CDLHIKKAKEMOD_Bull\": 82,\n",
    "        \"CDLHIKKAKEMOD_Bear\": 81,\n",
    "        \"CDLHIKKAKE_Bull\": 85,\n",
    "        \"CDLHIKKAKE_Bear\": 83,\n",
    "        \"CDLENGULFING_Bull\": 84,\n",
    "        \"CDLENGULFING_Bear\": 91,\n",
    "        \"CDLMATHOLD_Bull\": 86,\n",
    "        \"CDLMATHOLD_Bear\": 86,\n",
    "        \"CDLHANGINGMAN_Bull\": 87,\n",
    "        \"CDLHANGINGMAN_Bear\": 87,\n",
    "        \"CDLRISEFALL3METHODS_Bull\": 94,\n",
    "        \"CDLRISEFALL3METHODS_Bear\": 89,\n",
    "        \"CDLKICKING_Bull\": 96,\n",
    "        \"CDLKICKING_Bear\": 102,\n",
    "        \"CDLDRAGONFLYDOJI_Bull\": 98,\n",
    "        \"CDLDRAGONFLYDOJI_Bear\": 98,\n",
    "        \"CDLCONCEALBABYSWALL_Bull\": 101,\n",
    "        \"CDLCONCEALBABYSWALL_Bear\": 101,\n",
    "        \"CDL3STARSINSOUTH_Bull\": 103,\n",
    "        \"CDL3STARSINSOUTH_Bear\": 103,\n",
    "        \"CDLDOJI_Bull\": 104,\n",
    "        \"CDLDOJI_Bear\": 104\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Detection of Patterns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract OHLC \n",
    "op = crypto['open']\n",
    "hi = crypto['high']\n",
    "lo = crypto['low']\n",
    "cl = crypto['close']\n",
    "\n",
    "# create columns for each pattern\n",
    "for candle in candle_names:\n",
    "    # below is same as;\n",
    "    # df[\"CDL3LINESTRIKE\"] = talib.CDL3LINESTRIKE(op, hi, lo, cl)\n",
    "    crypto[candle] = getattr(talib, candle)(op, hi, lo, cl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naming of Patterns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import compress\n",
    "\n",
    "crypto['candlestick_pattern'] = np.nan\n",
    "crypto['candlestick_match_count'] = np.nan\n",
    "\n",
    "for index, row in crypto.iterrows():\n",
    "\n",
    "    # no pattern found\n",
    "    if len(row[candle_names]) - sum(row[candle_names] == 0) == 0:\n",
    "        crypto.loc[index,'candlestick_pattern'] = \"NO_PATTERN\"\n",
    "        crypto.loc[index, 'candlestick_match_count'] = 0\n",
    "    # single pattern found\n",
    "    elif len(row[candle_names]) - sum(row[candle_names] == 0) == 1:\n",
    "        # bull pattern 100 or 200\n",
    "        if any(row[candle_names].values > 0):\n",
    "            pattern = list(compress(row[candle_names].keys(), row[candle_names].values != 0))[0] + '_Bull'\n",
    "            crypto.loc[index, 'candlestick_pattern'] = pattern\n",
    "            crypto.loc[index, 'candlestick_match_count'] = 1\n",
    "        # bear pattern -100 or -200\n",
    "        else:\n",
    "            pattern = list(compress(row[candle_names].keys(), row[candle_names].values != 0))[0] + '_Bear'\n",
    "            crypto.loc[index, 'candlestick_pattern'] = pattern\n",
    "            crypto.loc[index, 'candlestick_match_count'] = 1\n",
    "    # multiple patterns matched -- select best performance\n",
    "    else:\n",
    "        # filter out pattern names from bool list of values\n",
    "        patterns = list(compress(row[candle_names].keys(), row[candle_names].values != 0))\n",
    "        container = []\n",
    "        for pattern in patterns:\n",
    "            if row[pattern] > 0:\n",
    "                container.append(pattern + '_Bull')\n",
    "            else:\n",
    "                container.append(pattern + '_Bear')\n",
    "        rank_list = [candle_rankings[p] for p in container]\n",
    "        if len(rank_list) == len(container):\n",
    "            rank_index_best = rank_list.index(min(rank_list))\n",
    "            crypto.loc[index, 'candlestick_pattern'] = container[rank_index_best]\n",
    "            crypto.loc[index, 'candlestick_match_count'] = len(container)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up candle columns\n",
    "try:\n",
    "    crypto.drop(candle_names, axis = 1, inplace = True)\n",
    "except:\n",
    "    pass\n",
    "\n",
    "crypto.loc[crypto.candlestick_pattern == 'NO_PATTERN', 'candlestick_pattern'] = ''\n",
    "crypto.candlestick_pattern = crypto.candlestick_pattern.apply(lambda x: x[3:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "OUTPUT_FOLDER = '../output/'\n",
    "crypto.to_csv(OUTPUT_FOLDER + 'ethusd.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualisation\n",
    "See the visualisation on Tableau here: [Candlestick Patterns](https://public.tableau.com/profile/edsicage#!/vizhome/MachineTrading/CandlestickPattern)\n",
    "\n",
    "---\n",
    "# END"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
